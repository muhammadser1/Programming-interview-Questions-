class Solution {
public:
    void mergeSort(vector<int>& nums, int start, int end) {
        if (end - start + 1 <= 1) return;
        int mid = start + (end - start) / 2;
        mergeSort(nums, start, mid);
        mergeSort(nums, mid + 1, end);
        merge(nums, start, mid, end);
    }
    void merge(vector<int>& nums, int start, int mid, int end) {
        int left = start;
        int right = mid + 1;
        vector<int> buffer(end - start + 1);
        int bufferPointer = 0; 

        while (left <= mid && right <= end) {
            if (nums[left] < nums[right]) {
                buffer[bufferPointer++] = nums[left++];
            } else {
                buffer[bufferPointer++] = nums[right++];
            }
        }

        while (left <= mid) buffer[bufferPointer++] = nums[left++];
        while (right <= end) buffer[bufferPointer++] = nums[right++];
        

        for (int i = start; i <= end; i++) {
            nums[i] = buffer[i - start];
        }
    }
    vector<int> sortArray(vector<int>& nums) {
        mergeSort(nums, 0, nums.size()-1);
        return nums;
    }
    //https://leetcode.com/problems/sort-an-array/submissions/                         (c++)
};